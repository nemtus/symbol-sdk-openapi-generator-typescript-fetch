/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    TransactionHashes,
    TransactionHashesFromJSON,
    TransactionHashesToJSON,
    TransactionStatusDTO,
    TransactionStatusDTOFromJSON,
    TransactionStatusDTOToJSON,
} from '../models';

export interface GetTransactionStatusRequest {
    hash: string;
}

export interface GetTransactionStatusesRequest {
    transactionHashes: TransactionHashes;
}

/**
 * 
 */
export class TransactionStatusRoutesApi extends runtime.BaseAPI {

    /**
     * Returns the transaction status for a given hash.
     * Get transaction status
     */
    async getTransactionStatusRaw(requestParameters: GetTransactionStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TransactionStatusDTO>> {
        if (requestParameters.hash === null || requestParameters.hash === undefined) {
            throw new runtime.RequiredError('hash','Required parameter requestParameters.hash was null or undefined when calling getTransactionStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transactionStatus/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters.hash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionStatusDTOFromJSON(jsonValue));
    }

    /**
     * Returns the transaction status for a given hash.
     * Get transaction status
     */
    async getTransactionStatus(requestParameters: GetTransactionStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TransactionStatusDTO> {
        const response = await this.getTransactionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an array of transaction statuses for a given array of transaction hashes.
     * Get transaction statuses
     */
    async getTransactionStatusesRaw(requestParameters: GetTransactionStatusesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<TransactionStatusDTO>>> {
        if (requestParameters.transactionHashes === null || requestParameters.transactionHashes === undefined) {
            throw new runtime.RequiredError('transactionHashes','Required parameter requestParameters.transactionHashes was null or undefined when calling getTransactionStatuses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transactionStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionHashesToJSON(requestParameters.transactionHashes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionStatusDTOFromJSON));
    }

    /**
     * Returns an array of transaction statuses for a given array of transaction hashes.
     * Get transaction statuses
     */
    async getTransactionStatuses(requestParameters: GetTransactionStatusesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<TransactionStatusDTO>> {
        const response = await this.getTransactionStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
