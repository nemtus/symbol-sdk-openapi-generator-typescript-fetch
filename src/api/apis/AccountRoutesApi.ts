/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountIds,
    AccountIdsFromJSON,
    AccountIdsToJSON,
    AccountInfoDTO,
    AccountInfoDTOFromJSON,
    AccountInfoDTOToJSON,
    AccountOrderByEnum,
    AccountOrderByEnumFromJSON,
    AccountOrderByEnumToJSON,
    AccountPage,
    AccountPageFromJSON,
    AccountPageToJSON,
    MerkleStateInfoDTO,
    MerkleStateInfoDTOFromJSON,
    MerkleStateInfoDTOToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
} from '../models';

export interface GetAccountInfoRequest {
    accountId: string;
}

export interface GetAccountInfoMerkleRequest {
    accountId: string;
}

export interface GetAccountsInfoRequest {
    accountIds?: AccountIds;
}

export interface SearchAccountsRequest {
    pageSize?: number;
    pageNumber?: number;
    offset?: string;
    order?: Order;
    orderBy?: AccountOrderByEnum;
    mosaicId?: string;
}

/**
 * 
 */
export class AccountRoutesApi extends runtime.BaseAPI {

    /**
     * Returns the account information.
     * Get account information
     */
    async getAccountInfoRaw(requestParameters: GetAccountInfoRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AccountInfoDTO>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountInfoDTOFromJSON(jsonValue));
    }

    /**
     * Returns the account information.
     * Get account information
     */
    async getAccountInfo(requestParameters: GetAccountInfoRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AccountInfoDTO> {
        const response = await this.getAccountInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the account merkle information.
     * Get account merkle information
     */
    async getAccountInfoMerkleRaw(requestParameters: GetAccountInfoMerkleRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MerkleStateInfoDTO>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling getAccountInfoMerkle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts/{accountId}/merkle`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MerkleStateInfoDTOFromJSON(jsonValue));
    }

    /**
     * Returns the account merkle information.
     * Get account merkle information
     */
    async getAccountInfoMerkle(requestParameters: GetAccountInfoMerkleRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MerkleStateInfoDTO> {
        const response = await this.getAccountInfoMerkleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the account information for an array of accounts.
     * Get accounts information
     */
    async getAccountsInfoRaw(requestParameters: GetAccountsInfoRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<AccountInfoDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountIdsToJSON(requestParameters.accountIds),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountInfoDTOFromJSON));
    }

    /**
     * Returns the account information for an array of accounts.
     * Get accounts information
     */
    async getAccountsInfo(requestParameters: GetAccountsInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<AccountInfoDTO>> {
        const response = await this.getAccountsInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an array of accounts.
     * Search accounts
     */
    async searchAccountsRaw(requestParameters: SearchAccountsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AccountPage>> {
        const queryParameters: any = {};

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.mosaicId !== undefined) {
            queryParameters['mosaicId'] = requestParameters.mosaicId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountPageFromJSON(jsonValue));
    }

    /**
     * Gets an array of accounts.
     * Search accounts
     */
    async searchAccounts(requestParameters: SearchAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AccountPage> {
        const response = await this.searchAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
