/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    NodeHealthInfoDTO,
    NodeHealthInfoDTOFromJSON,
    NodeHealthInfoDTOToJSON,
    NodeInfoDTO,
    NodeInfoDTOFromJSON,
    NodeInfoDTOToJSON,
    NodeTimeDTO,
    NodeTimeDTOFromJSON,
    NodeTimeDTOToJSON,
    ServerInfoDTO,
    ServerInfoDTOFromJSON,
    ServerInfoDTOToJSON,
    StorageInfoDTO,
    StorageInfoDTOFromJSON,
    StorageInfoDTOToJSON,
    UnlockedAccountDTO,
    UnlockedAccountDTOFromJSON,
    UnlockedAccountDTOToJSON,
} from '../models';

/**
 * 
 */
export class NodeRoutesApi extends runtime.BaseAPI {

    /**
     * Supplies information regarding the connection and services status.
     * Get the node health information
     */
    async getNodeHealthRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NodeHealthInfoDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/node/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeHealthInfoDTOFromJSON(jsonValue));
    }

    /**
     * Supplies information regarding the connection and services status.
     * Get the node health information
     */
    async getNodeHealth(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NodeHealthInfoDTO> {
        const response = await this.getNodeHealthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Supplies additional information about the application running on a node.
     * Get the node information
     */
    async getNodeInfoRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NodeInfoDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/node/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeInfoDTOFromJSON(jsonValue));
    }

    /**
     * Supplies additional information about the application running on a node.
     * Get the node information
     */
    async getNodeInfo(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NodeInfoDTO> {
        const response = await this.getNodeInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of peers visible by the node.
     * Get peers information
     */
    async getNodePeersRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<NodeInfoDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/node/peers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NodeInfoDTOFromJSON));
    }

    /**
     * Gets the list of peers visible by the node.
     * Get peers information
     */
    async getNodePeers(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<NodeInfoDTO>> {
        const response = await this.getNodePeersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns storage information about the node.
     * Get the storage information of the node
     */
    async getNodeStorageRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StorageInfoDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/node/storage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageInfoDTOFromJSON(jsonValue));
    }

    /**
     * Returns storage information about the node.
     * Get the storage information of the node
     */
    async getNodeStorage(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StorageInfoDTO> {
        const response = await this.getNodeStorageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets the node time at the moment the reply was sent and received.
     * Get the node time
     */
    async getNodeTimeRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NodeTimeDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/node/time`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeTimeDTOFromJSON(jsonValue));
    }

    /**
     * Gets the node time at the moment the reply was sent and received.
     * Get the node time
     */
    async getNodeTime(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NodeTimeDTO> {
        const response = await this.getNodeTimeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the version of the running catapult-rest component.
     * Get the version of the running REST component
     */
    async getServerInfoRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ServerInfoDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/node/server`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerInfoDTOFromJSON(jsonValue));
    }

    /**
     * Returns the version of the running catapult-rest component.
     * Get the version of the running REST component
     */
    async getServerInfo(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ServerInfoDTO> {
        const response = await this.getServerInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns array of unlocked account public keys.
     * Get the unlocked harvesting account public keys.
     */
    async getUnlockedAccountRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlockedAccountDTO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/node/unlockedaccount`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlockedAccountDTOFromJSON(jsonValue));
    }

    /**
     * Returns array of unlocked account public keys.
     * Get the unlocked harvesting account public keys.
     */
    async getUnlockedAccount(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlockedAccountDTO> {
        const response = await this.getUnlockedAccountRaw(initOverrides);
        return await response.value();
    }

}
