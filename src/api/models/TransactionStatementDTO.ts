/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SourceDTO } from './SourceDTO';
import {
    SourceDTOFromJSON,
    SourceDTOFromJSONTyped,
    SourceDTOToJSON,
    SourceDTOToJSONTyped,
} from './SourceDTO';
import type { TransactionStatementDTOReceiptsInner } from './TransactionStatementDTOReceiptsInner';
import {
    TransactionStatementDTOReceiptsInnerFromJSON,
    TransactionStatementDTOReceiptsInnerFromJSONTyped,
    TransactionStatementDTOReceiptsInnerToJSON,
    TransactionStatementDTOReceiptsInnerToJSONTyped,
} from './TransactionStatementDTOReceiptsInner';

/**
 * 
 * @export
 * @interface TransactionStatementDTO
 */
export interface TransactionStatementDTO {
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof TransactionStatementDTO
     */
    height: string;
    /**
     * 
     * @type {SourceDTO}
     * @memberof TransactionStatementDTO
     */
    source: SourceDTO;
    /**
     * Array of receipts.
     * @type {Array<TransactionStatementDTOReceiptsInner>}
     * @memberof TransactionStatementDTO
     */
    receipts: Array<TransactionStatementDTOReceiptsInner>;
}

/**
 * Check if a given object implements the TransactionStatementDTO interface.
 */
export function instanceOfTransactionStatementDTO(value: Record<string, any>): value is TransactionStatementDTO {
    if (!('height' in value) || value['height'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('receipts' in value) || value['receipts'] === undefined) return false;
    return true;
}

export function TransactionStatementDTOFromJSON(json: any): TransactionStatementDTO {
    return TransactionStatementDTOFromJSONTyped(json, false);
}

export function TransactionStatementDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionStatementDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'height': json['height'],
        'source': SourceDTOFromJSON(json['source']),
        'receipts': ((json['receipts'] as Array<any>).map(TransactionStatementDTOReceiptsInnerFromJSON)),
    };
}

export function TransactionStatementDTOToJSON(json: any): TransactionStatementDTO {
    return TransactionStatementDTOToJSONTyped(json, false);
}

export function TransactionStatementDTOToJSONTyped(value?: TransactionStatementDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'height': value['height'],
        'source': SourceDTOToJSON(value['source']),
        'receipts': ((value['receipts'] as Array<any>).map(TransactionStatementDTOReceiptsInnerToJSON)),
    };
}

