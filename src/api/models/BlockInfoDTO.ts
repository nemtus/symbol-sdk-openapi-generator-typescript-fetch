/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BlockMetaDTO } from './BlockMetaDTO';
import {
    BlockMetaDTOFromJSON,
    BlockMetaDTOFromJSONTyped,
    BlockMetaDTOToJSON,
    BlockMetaDTOToJSONTyped,
} from './BlockMetaDTO';
import type { BlockInfoDTOBlock } from './BlockInfoDTOBlock';
import {
    BlockInfoDTOBlockFromJSON,
    BlockInfoDTOBlockFromJSONTyped,
    BlockInfoDTOBlockToJSON,
    BlockInfoDTOBlockToJSONTyped,
} from './BlockInfoDTOBlock';

/**
 * 
 * @export
 * @interface BlockInfoDTO
 */
export interface BlockInfoDTO {
    /**
     * Internal resource identifier.
     * @type {string}
     * @memberof BlockInfoDTO
     */
    id: string;
    /**
     * 
     * @type {BlockMetaDTO}
     * @memberof BlockInfoDTO
     */
    meta: BlockMetaDTO;
    /**
     * 
     * @type {BlockInfoDTOBlock}
     * @memberof BlockInfoDTO
     */
    block: BlockInfoDTOBlock;
}

/**
 * Check if a given object implements the BlockInfoDTO interface.
 */
export function instanceOfBlockInfoDTO(value: Record<string, any>): value is BlockInfoDTO {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('meta' in value) || value['meta'] === undefined) return false;
    if (!('block' in value) || value['block'] === undefined) return false;
    return true;
}

export function BlockInfoDTOFromJSON(json: any): BlockInfoDTO {
    return BlockInfoDTOFromJSONTyped(json, false);
}

export function BlockInfoDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockInfoDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'meta': BlockMetaDTOFromJSON(json['meta']),
        'block': BlockInfoDTOBlockFromJSON(json['block']),
    };
}

export function BlockInfoDTOToJSON(json: any): BlockInfoDTO {
    return BlockInfoDTOToJSONTyped(json, false);
}

export function BlockInfoDTOToJSONTyped(value?: BlockInfoDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'meta': BlockMetaDTOToJSON(value['meta']),
        'block': BlockInfoDTOBlockToJSON(value['block']),
    };
}

