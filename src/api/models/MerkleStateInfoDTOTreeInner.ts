/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MerkleTreeBranchDTO,
    MerkleTreeBranchDTOFromJSON,
    MerkleTreeBranchDTOFromJSONTyped,
    MerkleTreeBranchDTOToJSON,
} from './MerkleTreeBranchDTO';
import {
    MerkleTreeBranchLinkDTO,
    MerkleTreeBranchLinkDTOFromJSON,
    MerkleTreeBranchLinkDTOFromJSONTyped,
    MerkleTreeBranchLinkDTOToJSON,
} from './MerkleTreeBranchLinkDTO';
import {
    MerkleTreeLeafDTO,
    MerkleTreeLeafDTOFromJSON,
    MerkleTreeLeafDTOFromJSONTyped,
    MerkleTreeLeafDTOToJSON,
} from './MerkleTreeLeafDTO';
import {
    MerkleTreeNodeTypeEnum,
    MerkleTreeNodeTypeEnumFromJSON,
    MerkleTreeNodeTypeEnumFromJSONTyped,
    MerkleTreeNodeTypeEnumToJSON,
} from './MerkleTreeNodeTypeEnum';

/**
 * 
 * @export
 * @interface MerkleStateInfoDTOTreeInner
 */
export interface MerkleStateInfoDTOTreeInner {
    /**
     * 
     * @type {MerkleTreeNodeTypeEnum}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    type: MerkleTreeNodeTypeEnum;
    /**
     * Leaf path.
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    path: string;
    /**
     * Encoded leaf path.
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    encodedPath: string;
    /**
     * Nibble count.
     * @type {number}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    nibbleCount: number;
    /**
     * Branch link bitmask.
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    linkMask: string;
    /**
     * Branch links (max 16).
     * @type {Array<MerkleTreeBranchLinkDTO>}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    links: Array<MerkleTreeBranchLinkDTO>;
    /**
     * 
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    branchHash: string;
    /**
     * Leaf value (sha256 hash).
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    leafHash: string;
}

export function MerkleStateInfoDTOTreeInnerFromJSON(json: any): MerkleStateInfoDTOTreeInner {
    return MerkleStateInfoDTOTreeInnerFromJSONTyped(json, false);
}

export function MerkleStateInfoDTOTreeInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): MerkleStateInfoDTOTreeInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': MerkleTreeNodeTypeEnumFromJSON(json['type']),
        'path': json['path'],
        'encodedPath': json['encodedPath'],
        'nibbleCount': json['nibbleCount'],
        'linkMask': json['linkMask'],
        'links': ((json['links'] as Array<any>).map(MerkleTreeBranchLinkDTOFromJSON)),
        'branchHash': json['branchHash'],
        'value': json['value'],
        'leafHash': json['leafHash'],
    };
}

export function MerkleStateInfoDTOTreeInnerToJSON(value?: MerkleStateInfoDTOTreeInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': MerkleTreeNodeTypeEnumToJSON(value.type),
        'path': value.path,
        'encodedPath': value.encodedPath,
        'nibbleCount': value.nibbleCount,
        'linkMask': value.linkMask,
        'links': ((value.links as Array<any>).map(MerkleTreeBranchLinkDTOToJSON)),
        'branchHash': value.branchHash,
        'value': value.value,
        'leafHash': value.leafHash,
    };
}

