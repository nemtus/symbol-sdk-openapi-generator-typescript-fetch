/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MerkleTreeLeafDTO } from './MerkleTreeLeafDTO';
import {
    MerkleTreeLeafDTOFromJSON,
    MerkleTreeLeafDTOFromJSONTyped,
    MerkleTreeLeafDTOToJSON,
    MerkleTreeLeafDTOToJSONTyped,
} from './MerkleTreeLeafDTO';
import type { MerkleTreeBranchLinkDTO } from './MerkleTreeBranchLinkDTO';
import {
    MerkleTreeBranchLinkDTOFromJSON,
    MerkleTreeBranchLinkDTOFromJSONTyped,
    MerkleTreeBranchLinkDTOToJSON,
    MerkleTreeBranchLinkDTOToJSONTyped,
} from './MerkleTreeBranchLinkDTO';
import type { MerkleTreeNodeTypeEnum } from './MerkleTreeNodeTypeEnum';
import {
    MerkleTreeNodeTypeEnumFromJSON,
    MerkleTreeNodeTypeEnumFromJSONTyped,
    MerkleTreeNodeTypeEnumToJSON,
    MerkleTreeNodeTypeEnumToJSONTyped,
} from './MerkleTreeNodeTypeEnum';
import type { MerkleTreeBranchDTO } from './MerkleTreeBranchDTO';
import {
    MerkleTreeBranchDTOFromJSON,
    MerkleTreeBranchDTOFromJSONTyped,
    MerkleTreeBranchDTOToJSON,
    MerkleTreeBranchDTOToJSONTyped,
} from './MerkleTreeBranchDTO';

/**
 * 
 * @export
 * @interface MerkleStateInfoDTOTreeInner
 */
export interface MerkleStateInfoDTOTreeInner {
    /**
     * 
     * @type {MerkleTreeNodeTypeEnum}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    type: MerkleTreeNodeTypeEnum;
    /**
     * Leaf path.
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    path: string;
    /**
     * Encoded leaf path.
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    encodedPath: string;
    /**
     * Nibble count.
     * @type {number}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    nibbleCount: number;
    /**
     * Branch link bitmask.
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    linkMask: string;
    /**
     * Branch links (max 16).
     * @type {Array<MerkleTreeBranchLinkDTO>}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    links: Array<MerkleTreeBranchLinkDTO>;
    /**
     * 
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    branchHash: string;
    /**
     * Leaf value (sha256 hash).
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof MerkleStateInfoDTOTreeInner
     */
    leafHash: string;
}



/**
 * Check if a given object implements the MerkleStateInfoDTOTreeInner interface.
 */
export function instanceOfMerkleStateInfoDTOTreeInner(value: Record<string, any>): value is MerkleStateInfoDTOTreeInner {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('encodedPath' in value) || value['encodedPath'] === undefined) return false;
    if (!('nibbleCount' in value) || value['nibbleCount'] === undefined) return false;
    if (!('linkMask' in value) || value['linkMask'] === undefined) return false;
    if (!('links' in value) || value['links'] === undefined) return false;
    if (!('branchHash' in value) || value['branchHash'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('leafHash' in value) || value['leafHash'] === undefined) return false;
    return true;
}

export function MerkleStateInfoDTOTreeInnerFromJSON(json: any): MerkleStateInfoDTOTreeInner {
    return MerkleStateInfoDTOTreeInnerFromJSONTyped(json, false);
}

export function MerkleStateInfoDTOTreeInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): MerkleStateInfoDTOTreeInner {
    if (json == null) {
        return json;
    }
    return {
        
        'type': MerkleTreeNodeTypeEnumFromJSON(json['type']),
        'path': json['path'],
        'encodedPath': json['encodedPath'],
        'nibbleCount': json['nibbleCount'],
        'linkMask': json['linkMask'],
        'links': ((json['links'] as Array<any>).map(MerkleTreeBranchLinkDTOFromJSON)),
        'branchHash': json['branchHash'],
        'value': json['value'],
        'leafHash': json['leafHash'],
    };
}

export function MerkleStateInfoDTOTreeInnerToJSON(json: any): MerkleStateInfoDTOTreeInner {
    return MerkleStateInfoDTOTreeInnerToJSONTyped(json, false);
}

export function MerkleStateInfoDTOTreeInnerToJSONTyped(value?: MerkleStateInfoDTOTreeInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': MerkleTreeNodeTypeEnumToJSON(value['type']),
        'path': value['path'],
        'encodedPath': value['encodedPath'],
        'nibbleCount': value['nibbleCount'],
        'linkMask': value['linkMask'],
        'links': ((value['links'] as Array<any>).map(MerkleTreeBranchLinkDTOToJSON)),
        'branchHash': value['branchHash'],
        'value': value['value'],
        'leafHash': value['leafHash'],
    };
}

