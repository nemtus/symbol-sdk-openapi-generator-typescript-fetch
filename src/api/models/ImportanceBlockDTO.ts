/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NetworkTypeEnum } from './NetworkTypeEnum';
import {
    NetworkTypeEnumFromJSON,
    NetworkTypeEnumFromJSONTyped,
    NetworkTypeEnumToJSON,
    NetworkTypeEnumToJSONTyped,
} from './NetworkTypeEnum';

/**
 * 
 * @export
 * @interface ImportanceBlockDTO
 */
export interface ImportanceBlockDTO {
    /**
     * A number that allows uint 32 values.
     * @type {number}
     * @memberof ImportanceBlockDTO
     */
    size: number;
    /**
     * Entity's signature generated by the signer.
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    signature: string;
    /**
     * Public key.
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    signerPublicKey: string;
    /**
     * Entity version.
     * @type {number}
     * @memberof ImportanceBlockDTO
     */
    version: number;
    /**
     * 
     * @type {NetworkTypeEnum}
     * @memberof ImportanceBlockDTO
     */
    network: NetworkTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ImportanceBlockDTO
     */
    type: number;
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    height: string;
    /**
     * Number of milliseconds elapsed since the creation of the nemesis block. This value can be converted to epoch time by adding the network's 'epochAdjustment'.
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    timestamp: string;
    /**
     * Determines how hard is to harvest a new block, based on previous blocks.
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    difficulty: string;
    /**
     * 32-bytes VRF proof gamma.
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    proofGamma: string;
    /**
     * 16-bytes VRF proof verification hash.
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    proofVerificationHash: string;
    /**
     * 32-bytes VRF proof scalar.
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    proofScalar: string;
    /**
     * 
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    previousBlockHash: string;
    /**
     * 
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    transactionsHash: string;
    /**
     * 
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    receiptsHash: string;
    /**
     * 
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    stateHash: string;
    /**
     * Address encoded using a 32-character set.
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    beneficiaryAddress: string;
    /**
     * Fee multiplier applied to transactions contained in block.
     * @type {number}
     * @memberof ImportanceBlockDTO
     */
    feeMultiplier: number;
    /**
     * A number that allows uint 32 values.
     * @type {number}
     * @memberof ImportanceBlockDTO
     */
    votingEligibleAccountsCount: number;
    /**
     * A number that allows uint 64 values represented with a string.
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    harvestingEligibleAccountsCount: string;
    /**
     * Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    totalVotingBalance: string;
    /**
     * 
     * @type {string}
     * @memberof ImportanceBlockDTO
     */
    previousImportanceBlockHash: string;
}



/**
 * Check if a given object implements the ImportanceBlockDTO interface.
 */
export function instanceOfImportanceBlockDTO(value: Record<string, any>): value is ImportanceBlockDTO {
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('signature' in value) || value['signature'] === undefined) return false;
    if (!('signerPublicKey' in value) || value['signerPublicKey'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('height' in value) || value['height'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('difficulty' in value) || value['difficulty'] === undefined) return false;
    if (!('proofGamma' in value) || value['proofGamma'] === undefined) return false;
    if (!('proofVerificationHash' in value) || value['proofVerificationHash'] === undefined) return false;
    if (!('proofScalar' in value) || value['proofScalar'] === undefined) return false;
    if (!('previousBlockHash' in value) || value['previousBlockHash'] === undefined) return false;
    if (!('transactionsHash' in value) || value['transactionsHash'] === undefined) return false;
    if (!('receiptsHash' in value) || value['receiptsHash'] === undefined) return false;
    if (!('stateHash' in value) || value['stateHash'] === undefined) return false;
    if (!('beneficiaryAddress' in value) || value['beneficiaryAddress'] === undefined) return false;
    if (!('feeMultiplier' in value) || value['feeMultiplier'] === undefined) return false;
    if (!('votingEligibleAccountsCount' in value) || value['votingEligibleAccountsCount'] === undefined) return false;
    if (!('harvestingEligibleAccountsCount' in value) || value['harvestingEligibleAccountsCount'] === undefined) return false;
    if (!('totalVotingBalance' in value) || value['totalVotingBalance'] === undefined) return false;
    if (!('previousImportanceBlockHash' in value) || value['previousImportanceBlockHash'] === undefined) return false;
    return true;
}

export function ImportanceBlockDTOFromJSON(json: any): ImportanceBlockDTO {
    return ImportanceBlockDTOFromJSONTyped(json, false);
}

export function ImportanceBlockDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportanceBlockDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'size': json['size'],
        'signature': json['signature'],
        'signerPublicKey': json['signerPublicKey'],
        'version': json['version'],
        'network': NetworkTypeEnumFromJSON(json['network']),
        'type': json['type'],
        'height': json['height'],
        'timestamp': json['timestamp'],
        'difficulty': json['difficulty'],
        'proofGamma': json['proofGamma'],
        'proofVerificationHash': json['proofVerificationHash'],
        'proofScalar': json['proofScalar'],
        'previousBlockHash': json['previousBlockHash'],
        'transactionsHash': json['transactionsHash'],
        'receiptsHash': json['receiptsHash'],
        'stateHash': json['stateHash'],
        'beneficiaryAddress': json['beneficiaryAddress'],
        'feeMultiplier': json['feeMultiplier'],
        'votingEligibleAccountsCount': json['votingEligibleAccountsCount'],
        'harvestingEligibleAccountsCount': json['harvestingEligibleAccountsCount'],
        'totalVotingBalance': json['totalVotingBalance'],
        'previousImportanceBlockHash': json['previousImportanceBlockHash'],
    };
}

export function ImportanceBlockDTOToJSON(json: any): ImportanceBlockDTO {
    return ImportanceBlockDTOToJSONTyped(json, false);
}

export function ImportanceBlockDTOToJSONTyped(value?: ImportanceBlockDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'size': value['size'],
        'signature': value['signature'],
        'signerPublicKey': value['signerPublicKey'],
        'version': value['version'],
        'network': NetworkTypeEnumToJSON(value['network']),
        'type': value['type'],
        'height': value['height'],
        'timestamp': value['timestamp'],
        'difficulty': value['difficulty'],
        'proofGamma': value['proofGamma'],
        'proofVerificationHash': value['proofVerificationHash'],
        'proofScalar': value['proofScalar'],
        'previousBlockHash': value['previousBlockHash'],
        'transactionsHash': value['transactionsHash'],
        'receiptsHash': value['receiptsHash'],
        'stateHash': value['stateHash'],
        'beneficiaryAddress': value['beneficiaryAddress'],
        'feeMultiplier': value['feeMultiplier'],
        'votingEligibleAccountsCount': value['votingEligibleAccountsCount'],
        'harvestingEligibleAccountsCount': value['harvestingEligibleAccountsCount'],
        'totalVotingBalance': value['totalVotingBalance'],
        'previousImportanceBlockHash': value['previousImportanceBlockHash'],
    };
}

