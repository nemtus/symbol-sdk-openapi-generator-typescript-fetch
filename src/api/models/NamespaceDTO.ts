/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AliasDTO } from './AliasDTO';
import {
    AliasDTOFromJSON,
    AliasDTOFromJSONTyped,
    AliasDTOToJSON,
    AliasDTOToJSONTyped,
} from './AliasDTO';
import type { NamespaceRegistrationTypeEnum } from './NamespaceRegistrationTypeEnum';
import {
    NamespaceRegistrationTypeEnumFromJSON,
    NamespaceRegistrationTypeEnumFromJSONTyped,
    NamespaceRegistrationTypeEnumToJSON,
    NamespaceRegistrationTypeEnumToJSONTyped,
} from './NamespaceRegistrationTypeEnum';

/**
 * 
 * @export
 * @interface NamespaceDTO
 */
export interface NamespaceDTO {
    /**
     * The version of the state
     * @type {number}
     * @memberof NamespaceDTO
     */
    version: number;
    /**
     * 
     * @type {NamespaceRegistrationTypeEnum}
     * @memberof NamespaceDTO
     */
    registrationType: NamespaceRegistrationTypeEnum;
    /**
     * Level of the namespace.
     * @type {number}
     * @memberof NamespaceDTO
     */
    depth: number;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof NamespaceDTO
     */
    level0: string;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof NamespaceDTO
     */
    level1?: string;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof NamespaceDTO
     */
    level2?: string;
    /**
     * 
     * @type {AliasDTO}
     * @memberof NamespaceDTO
     */
    alias: AliasDTO;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof NamespaceDTO
     */
    parentId: string;
    /**
     * Address encoded using a 32-character set.
     * @type {string}
     * @memberof NamespaceDTO
     */
    ownerAddress: string;
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof NamespaceDTO
     */
    startHeight: string;
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof NamespaceDTO
     */
    endHeight: string;
}



/**
 * Check if a given object implements the NamespaceDTO interface.
 */
export function instanceOfNamespaceDTO(value: Record<string, any>): value is NamespaceDTO {
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('registrationType' in value) || value['registrationType'] === undefined) return false;
    if (!('depth' in value) || value['depth'] === undefined) return false;
    if (!('level0' in value) || value['level0'] === undefined) return false;
    if (!('alias' in value) || value['alias'] === undefined) return false;
    if (!('parentId' in value) || value['parentId'] === undefined) return false;
    if (!('ownerAddress' in value) || value['ownerAddress'] === undefined) return false;
    if (!('startHeight' in value) || value['startHeight'] === undefined) return false;
    if (!('endHeight' in value) || value['endHeight'] === undefined) return false;
    return true;
}

export function NamespaceDTOFromJSON(json: any): NamespaceDTO {
    return NamespaceDTOFromJSONTyped(json, false);
}

export function NamespaceDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): NamespaceDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'version': json['version'],
        'registrationType': NamespaceRegistrationTypeEnumFromJSON(json['registrationType']),
        'depth': json['depth'],
        'level0': json['level0'],
        'level1': json['level1'] == null ? undefined : json['level1'],
        'level2': json['level2'] == null ? undefined : json['level2'],
        'alias': AliasDTOFromJSON(json['alias']),
        'parentId': json['parentId'],
        'ownerAddress': json['ownerAddress'],
        'startHeight': json['startHeight'],
        'endHeight': json['endHeight'],
    };
}

export function NamespaceDTOToJSON(json: any): NamespaceDTO {
    return NamespaceDTOToJSONTyped(json, false);
}

export function NamespaceDTOToJSONTyped(value?: NamespaceDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'version': value['version'],
        'registrationType': NamespaceRegistrationTypeEnumToJSON(value['registrationType']),
        'depth': value['depth'],
        'level0': value['level0'],
        'level1': value['level1'],
        'level2': value['level2'],
        'alias': AliasDTOToJSON(value['alias']),
        'parentId': value['parentId'],
        'ownerAddress': value['ownerAddress'],
        'startHeight': value['startHeight'],
        'endHeight': value['endHeight'],
    };
}

