/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmbeddedMultisigAccountModificationTransactionDTO } from './EmbeddedMultisigAccountModificationTransactionDTO';
import {
    EmbeddedMultisigAccountModificationTransactionDTOFromJSON,
    EmbeddedMultisigAccountModificationTransactionDTOFromJSONTyped,
    EmbeddedMultisigAccountModificationTransactionDTOToJSON,
    EmbeddedMultisigAccountModificationTransactionDTOToJSONTyped,
} from './EmbeddedMultisigAccountModificationTransactionDTO';
import type { NetworkTypeEnum } from './NetworkTypeEnum';
import {
    NetworkTypeEnumFromJSON,
    NetworkTypeEnumFromJSONTyped,
    NetworkTypeEnumToJSON,
    NetworkTypeEnumToJSONTyped,
} from './NetworkTypeEnum';
import type { EmbeddedAddressAliasTransactionDTO } from './EmbeddedAddressAliasTransactionDTO';
import {
    EmbeddedAddressAliasTransactionDTOFromJSON,
    EmbeddedAddressAliasTransactionDTOFromJSONTyped,
    EmbeddedAddressAliasTransactionDTOToJSON,
    EmbeddedAddressAliasTransactionDTOToJSONTyped,
} from './EmbeddedAddressAliasTransactionDTO';
import type { EmbeddedVotingKeyLinkTransactionDTO } from './EmbeddedVotingKeyLinkTransactionDTO';
import {
    EmbeddedVotingKeyLinkTransactionDTOFromJSON,
    EmbeddedVotingKeyLinkTransactionDTOFromJSONTyped,
    EmbeddedVotingKeyLinkTransactionDTOToJSON,
    EmbeddedVotingKeyLinkTransactionDTOToJSONTyped,
} from './EmbeddedVotingKeyLinkTransactionDTO';
import type { EmbeddedHashLockTransactionDTO } from './EmbeddedHashLockTransactionDTO';
import {
    EmbeddedHashLockTransactionDTOFromJSON,
    EmbeddedHashLockTransactionDTOFromJSONTyped,
    EmbeddedHashLockTransactionDTOToJSON,
    EmbeddedHashLockTransactionDTOToJSONTyped,
} from './EmbeddedHashLockTransactionDTO';
import type { EmbeddedAccountKeyLinkTransactionDTO } from './EmbeddedAccountKeyLinkTransactionDTO';
import {
    EmbeddedAccountKeyLinkTransactionDTOFromJSON,
    EmbeddedAccountKeyLinkTransactionDTOFromJSONTyped,
    EmbeddedAccountKeyLinkTransactionDTOToJSON,
    EmbeddedAccountKeyLinkTransactionDTOToJSONTyped,
} from './EmbeddedAccountKeyLinkTransactionDTO';
import type { EmbeddedMosaicGlobalRestrictionTransactionDTO } from './EmbeddedMosaicGlobalRestrictionTransactionDTO';
import {
    EmbeddedMosaicGlobalRestrictionTransactionDTOFromJSON,
    EmbeddedMosaicGlobalRestrictionTransactionDTOFromJSONTyped,
    EmbeddedMosaicGlobalRestrictionTransactionDTOToJSON,
    EmbeddedMosaicGlobalRestrictionTransactionDTOToJSONTyped,
} from './EmbeddedMosaicGlobalRestrictionTransactionDTO';
import type { TransactionTypeEnum } from './TransactionTypeEnum';
import {
    TransactionTypeEnumFromJSON,
    TransactionTypeEnumFromJSONTyped,
    TransactionTypeEnumToJSON,
    TransactionTypeEnumToJSONTyped,
} from './TransactionTypeEnum';
import type { EmbeddedSecretProofTransactionDTO } from './EmbeddedSecretProofTransactionDTO';
import {
    EmbeddedSecretProofTransactionDTOFromJSON,
    EmbeddedSecretProofTransactionDTOFromJSONTyped,
    EmbeddedSecretProofTransactionDTOToJSON,
    EmbeddedSecretProofTransactionDTOToJSONTyped,
} from './EmbeddedSecretProofTransactionDTO';
import type { EmbeddedAccountAddressRestrictionTransactionDTO } from './EmbeddedAccountAddressRestrictionTransactionDTO';
import {
    EmbeddedAccountAddressRestrictionTransactionDTOFromJSON,
    EmbeddedAccountAddressRestrictionTransactionDTOFromJSONTyped,
    EmbeddedAccountAddressRestrictionTransactionDTOToJSON,
    EmbeddedAccountAddressRestrictionTransactionDTOToJSONTyped,
} from './EmbeddedAccountAddressRestrictionTransactionDTO';
import type { EmbeddedNodeKeyLinkTransactionDTO } from './EmbeddedNodeKeyLinkTransactionDTO';
import {
    EmbeddedNodeKeyLinkTransactionDTOFromJSON,
    EmbeddedNodeKeyLinkTransactionDTOFromJSONTyped,
    EmbeddedNodeKeyLinkTransactionDTOToJSON,
    EmbeddedNodeKeyLinkTransactionDTOToJSONTyped,
} from './EmbeddedNodeKeyLinkTransactionDTO';
import type { MosaicRestrictionTypeEnum } from './MosaicRestrictionTypeEnum';
import {
    MosaicRestrictionTypeEnumFromJSON,
    MosaicRestrictionTypeEnumFromJSONTyped,
    MosaicRestrictionTypeEnumToJSON,
    MosaicRestrictionTypeEnumToJSONTyped,
} from './MosaicRestrictionTypeEnum';
import type { EmbeddedAccountMosaicRestrictionTransactionDTO } from './EmbeddedAccountMosaicRestrictionTransactionDTO';
import {
    EmbeddedAccountMosaicRestrictionTransactionDTOFromJSON,
    EmbeddedAccountMosaicRestrictionTransactionDTOFromJSONTyped,
    EmbeddedAccountMosaicRestrictionTransactionDTOToJSON,
    EmbeddedAccountMosaicRestrictionTransactionDTOToJSONTyped,
} from './EmbeddedAccountMosaicRestrictionTransactionDTO';
import type { EmbeddedAccountOperationRestrictionTransactionDTO } from './EmbeddedAccountOperationRestrictionTransactionDTO';
import {
    EmbeddedAccountOperationRestrictionTransactionDTOFromJSON,
    EmbeddedAccountOperationRestrictionTransactionDTOFromJSONTyped,
    EmbeddedAccountOperationRestrictionTransactionDTOToJSON,
    EmbeddedAccountOperationRestrictionTransactionDTOToJSONTyped,
} from './EmbeddedAccountOperationRestrictionTransactionDTO';
import type { AliasActionEnum } from './AliasActionEnum';
import {
    AliasActionEnumFromJSON,
    AliasActionEnumFromJSONTyped,
    AliasActionEnumToJSON,
    AliasActionEnumToJSONTyped,
} from './AliasActionEnum';
import type { EmbeddedMosaicSupplyRevocationTransactionDTO } from './EmbeddedMosaicSupplyRevocationTransactionDTO';
import {
    EmbeddedMosaicSupplyRevocationTransactionDTOFromJSON,
    EmbeddedMosaicSupplyRevocationTransactionDTOFromJSONTyped,
    EmbeddedMosaicSupplyRevocationTransactionDTOToJSON,
    EmbeddedMosaicSupplyRevocationTransactionDTOToJSONTyped,
} from './EmbeddedMosaicSupplyRevocationTransactionDTO';
import type { EmbeddedVrfKeyLinkTransactionDTO } from './EmbeddedVrfKeyLinkTransactionDTO';
import {
    EmbeddedVrfKeyLinkTransactionDTOFromJSON,
    EmbeddedVrfKeyLinkTransactionDTOFromJSONTyped,
    EmbeddedVrfKeyLinkTransactionDTOToJSON,
    EmbeddedVrfKeyLinkTransactionDTOToJSONTyped,
} from './EmbeddedVrfKeyLinkTransactionDTO';
import type { EmbeddedMosaicDefinitionTransactionDTO } from './EmbeddedMosaicDefinitionTransactionDTO';
import {
    EmbeddedMosaicDefinitionTransactionDTOFromJSON,
    EmbeddedMosaicDefinitionTransactionDTOFromJSONTyped,
    EmbeddedMosaicDefinitionTransactionDTOToJSON,
    EmbeddedMosaicDefinitionTransactionDTOToJSONTyped,
} from './EmbeddedMosaicDefinitionTransactionDTO';
import type { EmbeddedNamespaceRegistrationTransactionDTO } from './EmbeddedNamespaceRegistrationTransactionDTO';
import {
    EmbeddedNamespaceRegistrationTransactionDTOFromJSON,
    EmbeddedNamespaceRegistrationTransactionDTOFromJSONTyped,
    EmbeddedNamespaceRegistrationTransactionDTOToJSON,
    EmbeddedNamespaceRegistrationTransactionDTOToJSONTyped,
} from './EmbeddedNamespaceRegistrationTransactionDTO';
import type { EmbeddedMosaicSupplyChangeTransactionDTO } from './EmbeddedMosaicSupplyChangeTransactionDTO';
import {
    EmbeddedMosaicSupplyChangeTransactionDTOFromJSON,
    EmbeddedMosaicSupplyChangeTransactionDTOFromJSONTyped,
    EmbeddedMosaicSupplyChangeTransactionDTOToJSON,
    EmbeddedMosaicSupplyChangeTransactionDTOToJSONTyped,
} from './EmbeddedMosaicSupplyChangeTransactionDTO';
import type { EmbeddedNamespaceMetadataTransactionDTO } from './EmbeddedNamespaceMetadataTransactionDTO';
import {
    EmbeddedNamespaceMetadataTransactionDTOFromJSON,
    EmbeddedNamespaceMetadataTransactionDTOFromJSONTyped,
    EmbeddedNamespaceMetadataTransactionDTOToJSON,
    EmbeddedNamespaceMetadataTransactionDTOToJSONTyped,
} from './EmbeddedNamespaceMetadataTransactionDTO';
import type { EmbeddedTransferTransactionDTO } from './EmbeddedTransferTransactionDTO';
import {
    EmbeddedTransferTransactionDTOFromJSON,
    EmbeddedTransferTransactionDTOFromJSONTyped,
    EmbeddedTransferTransactionDTOToJSON,
    EmbeddedTransferTransactionDTOToJSONTyped,
} from './EmbeddedTransferTransactionDTO';
import type { EmbeddedMosaicAliasTransactionDTO } from './EmbeddedMosaicAliasTransactionDTO';
import {
    EmbeddedMosaicAliasTransactionDTOFromJSON,
    EmbeddedMosaicAliasTransactionDTOFromJSONTyped,
    EmbeddedMosaicAliasTransactionDTOToJSON,
    EmbeddedMosaicAliasTransactionDTOToJSONTyped,
} from './EmbeddedMosaicAliasTransactionDTO';
import type { EmbeddedMosaicAddressRestrictionTransactionDTO } from './EmbeddedMosaicAddressRestrictionTransactionDTO';
import {
    EmbeddedMosaicAddressRestrictionTransactionDTOFromJSON,
    EmbeddedMosaicAddressRestrictionTransactionDTOFromJSONTyped,
    EmbeddedMosaicAddressRestrictionTransactionDTOToJSON,
    EmbeddedMosaicAddressRestrictionTransactionDTOToJSONTyped,
} from './EmbeddedMosaicAddressRestrictionTransactionDTO';
import type { LockHashAlgorithmEnum } from './LockHashAlgorithmEnum';
import {
    LockHashAlgorithmEnumFromJSON,
    LockHashAlgorithmEnumFromJSONTyped,
    LockHashAlgorithmEnumToJSON,
    LockHashAlgorithmEnumToJSONTyped,
} from './LockHashAlgorithmEnum';
import type { EmbeddedMosaicMetadataTransactionDTO } from './EmbeddedMosaicMetadataTransactionDTO';
import {
    EmbeddedMosaicMetadataTransactionDTOFromJSON,
    EmbeddedMosaicMetadataTransactionDTOFromJSONTyped,
    EmbeddedMosaicMetadataTransactionDTOToJSON,
    EmbeddedMosaicMetadataTransactionDTOToJSONTyped,
} from './EmbeddedMosaicMetadataTransactionDTO';
import type { NamespaceRegistrationTypeEnum } from './NamespaceRegistrationTypeEnum';
import {
    NamespaceRegistrationTypeEnumFromJSON,
    NamespaceRegistrationTypeEnumFromJSONTyped,
    NamespaceRegistrationTypeEnumToJSON,
    NamespaceRegistrationTypeEnumToJSONTyped,
} from './NamespaceRegistrationTypeEnum';
import type { EmbeddedSecretLockTransactionDTO } from './EmbeddedSecretLockTransactionDTO';
import {
    EmbeddedSecretLockTransactionDTOFromJSON,
    EmbeddedSecretLockTransactionDTOFromJSONTyped,
    EmbeddedSecretLockTransactionDTOToJSON,
    EmbeddedSecretLockTransactionDTOToJSONTyped,
} from './EmbeddedSecretLockTransactionDTO';
import type { EmbeddedAccountMetadataTransactionDTO } from './EmbeddedAccountMetadataTransactionDTO';
import {
    EmbeddedAccountMetadataTransactionDTOFromJSON,
    EmbeddedAccountMetadataTransactionDTOFromJSONTyped,
    EmbeddedAccountMetadataTransactionDTOToJSON,
    EmbeddedAccountMetadataTransactionDTOToJSONTyped,
} from './EmbeddedAccountMetadataTransactionDTO';
import type { AccountRestrictionFlagsEnum } from './AccountRestrictionFlagsEnum';
import {
    AccountRestrictionFlagsEnumFromJSON,
    AccountRestrictionFlagsEnumFromJSONTyped,
    AccountRestrictionFlagsEnumToJSON,
    AccountRestrictionFlagsEnumToJSONTyped,
} from './AccountRestrictionFlagsEnum';
import type { LinkActionEnum } from './LinkActionEnum';
import {
    LinkActionEnumFromJSON,
    LinkActionEnumFromJSONTyped,
    LinkActionEnumToJSON,
    LinkActionEnumToJSONTyped,
} from './LinkActionEnum';
import type { MosaicSupplyChangeActionEnum } from './MosaicSupplyChangeActionEnum';
import {
    MosaicSupplyChangeActionEnumFromJSON,
    MosaicSupplyChangeActionEnumFromJSONTyped,
    MosaicSupplyChangeActionEnumToJSON,
    MosaicSupplyChangeActionEnumToJSONTyped,
} from './MosaicSupplyChangeActionEnum';
import type { UnresolvedMosaic } from './UnresolvedMosaic';
import {
    UnresolvedMosaicFromJSON,
    UnresolvedMosaicFromJSONTyped,
    UnresolvedMosaicToJSON,
    UnresolvedMosaicToJSONTyped,
} from './UnresolvedMosaic';

/**
 * 
 * @export
 * @interface EmbeddedTransactionInfoDTOTransaction
 */
export interface EmbeddedTransactionInfoDTOTransaction {
    /**
     * Public key.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    signerPublicKey: string;
    /**
     * Entity version.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    version: number;
    /**
     * 
     * @type {NetworkTypeEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    network: NetworkTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    type: number;
    /**
     * 32 bytes voting public key.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    linkedPublicKey: string;
    /**
     * 
     * @type {LinkActionEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    linkAction: LinkActionEnum;
    /**
     * Finalization Epoch
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    startEpoch: number;
    /**
     * Finalization Epoch
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    endEpoch: number;
    /**
     * Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
     * is used instead of the real mosaic identifier.
     * 
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    mosaicId: string;
    /**
     * Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    amount: string;
    /**
     * Duration expressed in number of blocks.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    duration: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    hash: string;
    /**
     * Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a
     * regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA. 
     * Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA
     * 
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    recipientAddress: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    secret: string;
    /**
     * 
     * @type {LockHashAlgorithmEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    hashAlgorithm: LockHashAlgorithmEnum;
    /**
     * Original random set of bytes.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    proof: string;
    /**
     * Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a
     * regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA. 
     * Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA
     * 
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    targetAddress: string;
    /**
     * Metadata key scoped to source, target and type expressed.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    scopedMetadataKey: string;
    /**
     * Change in value size in bytes.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    valueSizeDelta: number;
    /**
     * A number that allows uint 32 values.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    valueSize: number;
    /**
     * Metadata value. If embedded in a transaction, this is calculated as xor(previous-value, value).
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    value: string;
    /**
     * Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
     * is used instead of the real mosaic identifier.
     * 
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    targetMosaicId: string;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    targetNamespaceId?: string;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    id: string;
    /**
     * A number that allows uint 32 values.
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    nonce: number;
    /**
     * - 0x00 (none) - No flags present.
     * - 0x01 (supplyMutable) - Mosaic supports supply changes even when mosaic owner owns partial supply.
     * - 0x02 (transferable) - Mosaic supports transfers between arbitrary accounts. When not set, mosaic can only be transferred to and from mosaic owner.
     * - 0x04 (restrictable) - Mosaic supports custom restrictions configured by mosaic owner.
     * - 0x08 (revokable) - Mosaic allows creator to revoke balances from another user.
     * 
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    flags: number;
    /**
     * Determines up to what decimal place the mosaic can be divided.
     * Divisibility of 3 means that a mosaic can be divided into smallest parts of 0.001 mosaics.
     * The divisibility must be in the range of 0 and 6.
     * 
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    divisibility: number;
    /**
     * Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    delta: string;
    /**
     * 
     * @type {MosaicSupplyChangeActionEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    action: MosaicSupplyChangeActionEnum;
    /**
     * Address expressed in Base32 format. If the bit 0 of byte 0 is not set (like in 0x90), then it is a
     * regular address. Example: TAOXUJOTTW3W5XTBQMQEX3SQNA6MCUVGXLXR3TA. 
     * Otherwise (e.g. 0x91) it represents a namespace id which starts at byte 1. Example: THBIMC3THGH5RUYAAAAAAAAAAAAAAAAAAAAAAAA
     * 
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    sourceAddress: string;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    parentId?: string;
    /**
     * 
     * @type {NamespaceRegistrationTypeEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    registrationType: NamespaceRegistrationTypeEnum;
    /**
     * Namespace name.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    name: string;
    /**
     * Namespace identifier.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    namespaceId: string;
    /**
     * Address encoded using a 32-character set.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    address: string;
    /**
     * 
     * @type {AliasActionEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    aliasAction: AliasActionEnum;
    /**
     * Number of signatures needed to remove a cosignatory.
     * If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
     * 
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    minRemovalDelta: number;
    /**
     * Number of signatures needed to approve a transaction.
     * If we are modifying an existing multisig account, this indicates the relative change of the minimum cosignatories.
     * 
     * @type {number}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    minApprovalDelta: number;
    /**
     * Array of cosignatory accounts to add.
     * @type {Array<string>}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    addressAdditions: Array<string>;
    /**
     * Array of cosignatory accounts to delete.
     * @type {Array<string>}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    addressDeletions: Array<string>;
    /**
     * 
     * @type {AccountRestrictionFlagsEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    restrictionFlags: AccountRestrictionFlagsEnum;
    /**
     * Account restriction additions.
     * @type {Array<TransactionTypeEnum>}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    restrictionAdditions: Array<TransactionTypeEnum>;
    /**
     * Account restriction deletions.
     * @type {Array<TransactionTypeEnum>}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    restrictionDeletions: Array<TransactionTypeEnum>;
    /**
     * Mosaic identifier. If the most significant bit of byte 0 is set, a namespaceId (alias)
     * is used instead of the real mosaic identifier.
     * 
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    referenceMosaicId: string;
    /**
     * Restriction key.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    restrictionKey: string;
    /**
     * Restriction value.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    previousRestrictionValue: string;
    /**
     * Restriction value.
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    newRestrictionValue: string;
    /**
     * 
     * @type {MosaicRestrictionTypeEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    previousRestrictionType: MosaicRestrictionTypeEnum;
    /**
     * 
     * @type {MosaicRestrictionTypeEnum}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    newRestrictionType: MosaicRestrictionTypeEnum;
    /**
     * Array of mosaics sent to the recipient.
     * 
     * @type {Array<UnresolvedMosaic>}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    mosaics: Array<UnresolvedMosaic>;
    /**
     * Transfer transaction message
     * @type {string}
     * @memberof EmbeddedTransactionInfoDTOTransaction
     */
    message?: string;
}



/**
 * Check if a given object implements the EmbeddedTransactionInfoDTOTransaction interface.
 */
export function instanceOfEmbeddedTransactionInfoDTOTransaction(value: Record<string, any>): value is EmbeddedTransactionInfoDTOTransaction {
    if (!('signerPublicKey' in value) || value['signerPublicKey'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('linkedPublicKey' in value) || value['linkedPublicKey'] === undefined) return false;
    if (!('linkAction' in value) || value['linkAction'] === undefined) return false;
    if (!('startEpoch' in value) || value['startEpoch'] === undefined) return false;
    if (!('endEpoch' in value) || value['endEpoch'] === undefined) return false;
    if (!('mosaicId' in value) || value['mosaicId'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('duration' in value) || value['duration'] === undefined) return false;
    if (!('hash' in value) || value['hash'] === undefined) return false;
    if (!('recipientAddress' in value) || value['recipientAddress'] === undefined) return false;
    if (!('secret' in value) || value['secret'] === undefined) return false;
    if (!('hashAlgorithm' in value) || value['hashAlgorithm'] === undefined) return false;
    if (!('proof' in value) || value['proof'] === undefined) return false;
    if (!('targetAddress' in value) || value['targetAddress'] === undefined) return false;
    if (!('scopedMetadataKey' in value) || value['scopedMetadataKey'] === undefined) return false;
    if (!('valueSizeDelta' in value) || value['valueSizeDelta'] === undefined) return false;
    if (!('valueSize' in value) || value['valueSize'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('targetMosaicId' in value) || value['targetMosaicId'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('nonce' in value) || value['nonce'] === undefined) return false;
    if (!('flags' in value) || value['flags'] === undefined) return false;
    if (!('divisibility' in value) || value['divisibility'] === undefined) return false;
    if (!('delta' in value) || value['delta'] === undefined) return false;
    if (!('action' in value) || value['action'] === undefined) return false;
    if (!('sourceAddress' in value) || value['sourceAddress'] === undefined) return false;
    if (!('registrationType' in value) || value['registrationType'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('namespaceId' in value) || value['namespaceId'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('aliasAction' in value) || value['aliasAction'] === undefined) return false;
    if (!('minRemovalDelta' in value) || value['minRemovalDelta'] === undefined) return false;
    if (!('minApprovalDelta' in value) || value['minApprovalDelta'] === undefined) return false;
    if (!('addressAdditions' in value) || value['addressAdditions'] === undefined) return false;
    if (!('addressDeletions' in value) || value['addressDeletions'] === undefined) return false;
    if (!('restrictionFlags' in value) || value['restrictionFlags'] === undefined) return false;
    if (!('restrictionAdditions' in value) || value['restrictionAdditions'] === undefined) return false;
    if (!('restrictionDeletions' in value) || value['restrictionDeletions'] === undefined) return false;
    if (!('referenceMosaicId' in value) || value['referenceMosaicId'] === undefined) return false;
    if (!('restrictionKey' in value) || value['restrictionKey'] === undefined) return false;
    if (!('previousRestrictionValue' in value) || value['previousRestrictionValue'] === undefined) return false;
    if (!('newRestrictionValue' in value) || value['newRestrictionValue'] === undefined) return false;
    if (!('previousRestrictionType' in value) || value['previousRestrictionType'] === undefined) return false;
    if (!('newRestrictionType' in value) || value['newRestrictionType'] === undefined) return false;
    if (!('mosaics' in value) || value['mosaics'] === undefined) return false;
    return true;
}

export function EmbeddedTransactionInfoDTOTransactionFromJSON(json: any): EmbeddedTransactionInfoDTOTransaction {
    return EmbeddedTransactionInfoDTOTransactionFromJSONTyped(json, false);
}

export function EmbeddedTransactionInfoDTOTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmbeddedTransactionInfoDTOTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'signerPublicKey': json['signerPublicKey'],
        'version': json['version'],
        'network': NetworkTypeEnumFromJSON(json['network']),
        'type': json['type'],
        'linkedPublicKey': json['linkedPublicKey'],
        'linkAction': LinkActionEnumFromJSON(json['linkAction']),
        'startEpoch': json['startEpoch'],
        'endEpoch': json['endEpoch'],
        'mosaicId': json['mosaicId'],
        'amount': json['amount'],
        'duration': json['duration'],
        'hash': json['hash'],
        'recipientAddress': json['recipientAddress'],
        'secret': json['secret'],
        'hashAlgorithm': LockHashAlgorithmEnumFromJSON(json['hashAlgorithm']),
        'proof': json['proof'],
        'targetAddress': json['targetAddress'],
        'scopedMetadataKey': json['scopedMetadataKey'],
        'valueSizeDelta': json['valueSizeDelta'],
        'valueSize': json['valueSize'],
        'value': json['value'],
        'targetMosaicId': json['targetMosaicId'],
        'targetNamespaceId': json['targetNamespaceId'] == null ? undefined : json['targetNamespaceId'],
        'id': json['id'],
        'nonce': json['nonce'],
        'flags': json['flags'],
        'divisibility': json['divisibility'],
        'delta': json['delta'],
        'action': MosaicSupplyChangeActionEnumFromJSON(json['action']),
        'sourceAddress': json['sourceAddress'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'registrationType': NamespaceRegistrationTypeEnumFromJSON(json['registrationType']),
        'name': json['name'],
        'namespaceId': json['namespaceId'],
        'address': json['address'],
        'aliasAction': AliasActionEnumFromJSON(json['aliasAction']),
        'minRemovalDelta': json['minRemovalDelta'],
        'minApprovalDelta': json['minApprovalDelta'],
        'addressAdditions': json['addressAdditions'],
        'addressDeletions': json['addressDeletions'],
        'restrictionFlags': AccountRestrictionFlagsEnumFromJSON(json['restrictionFlags']),
        'restrictionAdditions': ((json['restrictionAdditions'] as Array<any>).map(TransactionTypeEnumFromJSON)),
        'restrictionDeletions': ((json['restrictionDeletions'] as Array<any>).map(TransactionTypeEnumFromJSON)),
        'referenceMosaicId': json['referenceMosaicId'],
        'restrictionKey': json['restrictionKey'],
        'previousRestrictionValue': json['previousRestrictionValue'],
        'newRestrictionValue': json['newRestrictionValue'],
        'previousRestrictionType': MosaicRestrictionTypeEnumFromJSON(json['previousRestrictionType']),
        'newRestrictionType': MosaicRestrictionTypeEnumFromJSON(json['newRestrictionType']),
        'mosaics': ((json['mosaics'] as Array<any>).map(UnresolvedMosaicFromJSON)),
        'message': json['message'] == null ? undefined : json['message'],
    };
}

export function EmbeddedTransactionInfoDTOTransactionToJSON(json: any): EmbeddedTransactionInfoDTOTransaction {
    return EmbeddedTransactionInfoDTOTransactionToJSONTyped(json, false);
}

export function EmbeddedTransactionInfoDTOTransactionToJSONTyped(value?: EmbeddedTransactionInfoDTOTransaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'signerPublicKey': value['signerPublicKey'],
        'version': value['version'],
        'network': NetworkTypeEnumToJSON(value['network']),
        'type': value['type'],
        'linkedPublicKey': value['linkedPublicKey'],
        'linkAction': LinkActionEnumToJSON(value['linkAction']),
        'startEpoch': value['startEpoch'],
        'endEpoch': value['endEpoch'],
        'mosaicId': value['mosaicId'],
        'amount': value['amount'],
        'duration': value['duration'],
        'hash': value['hash'],
        'recipientAddress': value['recipientAddress'],
        'secret': value['secret'],
        'hashAlgorithm': LockHashAlgorithmEnumToJSON(value['hashAlgorithm']),
        'proof': value['proof'],
        'targetAddress': value['targetAddress'],
        'scopedMetadataKey': value['scopedMetadataKey'],
        'valueSizeDelta': value['valueSizeDelta'],
        'valueSize': value['valueSize'],
        'value': value['value'],
        'targetMosaicId': value['targetMosaicId'],
        'targetNamespaceId': value['targetNamespaceId'],
        'id': value['id'],
        'nonce': value['nonce'],
        'flags': value['flags'],
        'divisibility': value['divisibility'],
        'delta': value['delta'],
        'action': MosaicSupplyChangeActionEnumToJSON(value['action']),
        'sourceAddress': value['sourceAddress'],
        'parentId': value['parentId'],
        'registrationType': NamespaceRegistrationTypeEnumToJSON(value['registrationType']),
        'name': value['name'],
        'namespaceId': value['namespaceId'],
        'address': value['address'],
        'aliasAction': AliasActionEnumToJSON(value['aliasAction']),
        'minRemovalDelta': value['minRemovalDelta'],
        'minApprovalDelta': value['minApprovalDelta'],
        'addressAdditions': value['addressAdditions'],
        'addressDeletions': value['addressDeletions'],
        'restrictionFlags': AccountRestrictionFlagsEnumToJSON(value['restrictionFlags']),
        'restrictionAdditions': ((value['restrictionAdditions'] as Array<any>).map(TransactionTypeEnumToJSON)),
        'restrictionDeletions': ((value['restrictionDeletions'] as Array<any>).map(TransactionTypeEnumToJSON)),
        'referenceMosaicId': value['referenceMosaicId'],
        'restrictionKey': value['restrictionKey'],
        'previousRestrictionValue': value['previousRestrictionValue'],
        'newRestrictionValue': value['newRestrictionValue'],
        'previousRestrictionType': MosaicRestrictionTypeEnumToJSON(value['previousRestrictionType']),
        'newRestrictionType': MosaicRestrictionTypeEnumToJSON(value['newRestrictionType']),
        'mosaics': ((value['mosaics'] as Array<any>).map(UnresolvedMosaicToJSON)),
        'message': value['message'],
    };
}

