/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ResolutionStatementDTOUnresolved } from './ResolutionStatementDTOUnresolved';
import {
    ResolutionStatementDTOUnresolvedFromJSON,
    ResolutionStatementDTOUnresolvedFromJSONTyped,
    ResolutionStatementDTOUnresolvedToJSON,
    ResolutionStatementDTOUnresolvedToJSONTyped,
} from './ResolutionStatementDTOUnresolved';
import type { ResolutionEntryDTO } from './ResolutionEntryDTO';
import {
    ResolutionEntryDTOFromJSON,
    ResolutionEntryDTOFromJSONTyped,
    ResolutionEntryDTOToJSON,
    ResolutionEntryDTOToJSONTyped,
} from './ResolutionEntryDTO';

/**
 * 
 * @export
 * @interface ResolutionStatementDTO
 */
export interface ResolutionStatementDTO {
    /**
     * Height of the blockchain.
     * @type {string}
     * @memberof ResolutionStatementDTO
     */
    height: string;
    /**
     * 
     * @type {ResolutionStatementDTOUnresolved}
     * @memberof ResolutionStatementDTO
     */
    unresolved: ResolutionStatementDTOUnresolved;
    /**
     * Array of resolution entries linked to the unresolved namespaceId.
     * It is an array instead of a single resolution entry since
     * within one block the resolution might change for different sources due to alias related transactions.
     * 
     * @type {Array<ResolutionEntryDTO>}
     * @memberof ResolutionStatementDTO
     */
    resolutionEntries: Array<ResolutionEntryDTO>;
}

/**
 * Check if a given object implements the ResolutionStatementDTO interface.
 */
export function instanceOfResolutionStatementDTO(value: Record<string, any>): value is ResolutionStatementDTO {
    if (!('height' in value) || value['height'] === undefined) return false;
    if (!('unresolved' in value) || value['unresolved'] === undefined) return false;
    if (!('resolutionEntries' in value) || value['resolutionEntries'] === undefined) return false;
    return true;
}

export function ResolutionStatementDTOFromJSON(json: any): ResolutionStatementDTO {
    return ResolutionStatementDTOFromJSONTyped(json, false);
}

export function ResolutionStatementDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResolutionStatementDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'height': json['height'],
        'unresolved': ResolutionStatementDTOUnresolvedFromJSON(json['unresolved']),
        'resolutionEntries': ((json['resolutionEntries'] as Array<any>).map(ResolutionEntryDTOFromJSON)),
    };
}

export function ResolutionStatementDTOToJSON(json: any): ResolutionStatementDTO {
    return ResolutionStatementDTOToJSONTyped(json, false);
}

export function ResolutionStatementDTOToJSONTyped(value?: ResolutionStatementDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'height': value['height'],
        'unresolved': ResolutionStatementDTOUnresolvedToJSON(value['unresolved']),
        'resolutionEntries': ((value['resolutionEntries'] as Array<any>).map(ResolutionEntryDTOToJSON)),
    };
}

