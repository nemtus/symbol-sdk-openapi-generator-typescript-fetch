/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MerkleTreeNodeTypeEnum } from './MerkleTreeNodeTypeEnum';
import {
    MerkleTreeNodeTypeEnumFromJSON,
    MerkleTreeNodeTypeEnumFromJSONTyped,
    MerkleTreeNodeTypeEnumToJSON,
    MerkleTreeNodeTypeEnumToJSONTyped,
} from './MerkleTreeNodeTypeEnum';

/**
 * Merkle tree leaf node.
 * @export
 * @interface MerkleTreeLeafDTO
 */
export interface MerkleTreeLeafDTO {
    /**
     * 
     * @type {MerkleTreeNodeTypeEnum}
     * @memberof MerkleTreeLeafDTO
     */
    type: MerkleTreeNodeTypeEnum;
    /**
     * Leaf path.
     * @type {string}
     * @memberof MerkleTreeLeafDTO
     */
    path: string;
    /**
     * Encoded leaf path.
     * @type {string}
     * @memberof MerkleTreeLeafDTO
     */
    encodedPath: string;
    /**
     * Nibble count.
     * @type {number}
     * @memberof MerkleTreeLeafDTO
     */
    nibbleCount: number;
    /**
     * Leaf value (sha256 hash).
     * @type {string}
     * @memberof MerkleTreeLeafDTO
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof MerkleTreeLeafDTO
     */
    leafHash: string;
}



/**
 * Check if a given object implements the MerkleTreeLeafDTO interface.
 */
export function instanceOfMerkleTreeLeafDTO(value: Record<string, any>): value is MerkleTreeLeafDTO {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('encodedPath' in value) || value['encodedPath'] === undefined) return false;
    if (!('nibbleCount' in value) || value['nibbleCount'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('leafHash' in value) || value['leafHash'] === undefined) return false;
    return true;
}

export function MerkleTreeLeafDTOFromJSON(json: any): MerkleTreeLeafDTO {
    return MerkleTreeLeafDTOFromJSONTyped(json, false);
}

export function MerkleTreeLeafDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): MerkleTreeLeafDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'type': MerkleTreeNodeTypeEnumFromJSON(json['type']),
        'path': json['path'],
        'encodedPath': json['encodedPath'],
        'nibbleCount': json['nibbleCount'],
        'value': json['value'],
        'leafHash': json['leafHash'],
    };
}

export function MerkleTreeLeafDTOToJSON(json: any): MerkleTreeLeafDTO {
    return MerkleTreeLeafDTOToJSONTyped(json, false);
}

export function MerkleTreeLeafDTOToJSONTyped(value?: MerkleTreeLeafDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': MerkleTreeNodeTypeEnumToJSON(value['type']),
        'path': value['path'],
        'encodedPath': value['encodedPath'],
        'nibbleCount': value['nibbleCount'],
        'value': value['value'],
        'leafHash': value['leafHash'],
    };
}

