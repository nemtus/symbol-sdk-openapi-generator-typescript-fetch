/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResolutionStatementDTO,
    ResolutionStatementDTOFromJSON,
    ResolutionStatementDTOFromJSONTyped,
    ResolutionStatementDTOToJSON,
} from './ResolutionStatementDTO';
import {
    StatementMetaDTO,
    StatementMetaDTOFromJSON,
    StatementMetaDTOFromJSONTyped,
    StatementMetaDTOToJSON,
} from './StatementMetaDTO';

/**
 * A resolution statement keeps the relation between a namespace alias used in a transaction
 * and the real address or mosaicId.
 * @export
 * @interface ResolutionStatementInfoDTO
 */
export interface ResolutionStatementInfoDTO {
    /**
     * Internal resource identifier.
     * @type {string}
     * @memberof ResolutionStatementInfoDTO
     */
    id: string;
    /**
     * 
     * @type {StatementMetaDTO}
     * @memberof ResolutionStatementInfoDTO
     */
    meta: StatementMetaDTO;
    /**
     * 
     * @type {ResolutionStatementDTO}
     * @memberof ResolutionStatementInfoDTO
     */
    statement: ResolutionStatementDTO;
}

export function ResolutionStatementInfoDTOFromJSON(json: any): ResolutionStatementInfoDTO {
    return ResolutionStatementInfoDTOFromJSONTyped(json, false);
}

export function ResolutionStatementInfoDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResolutionStatementInfoDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'meta': StatementMetaDTOFromJSON(json['meta']),
        'statement': ResolutionStatementDTOFromJSON(json['statement']),
    };
}

export function ResolutionStatementInfoDTOToJSON(value?: ResolutionStatementInfoDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'meta': StatementMetaDTOToJSON(value.meta),
        'statement': ResolutionStatementDTOToJSON(value.statement),
    };
}

