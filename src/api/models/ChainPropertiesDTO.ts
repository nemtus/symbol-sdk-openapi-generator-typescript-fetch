/* tslint:disable */
/* eslint-disable */
/**
 * Catapult REST Endpoints
 * OpenAPI Specification of catapult-rest
 *
 * The version of the OpenAPI document: 1.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Chain related configuration properties.
 * @export
 * @interface ChainPropertiesDTO
 */
export interface ChainPropertiesDTO {
    /**
     * Set to true if block chain should calculate state hashes so that state is fully verifiable at each block.
     * @type {boolean}
     * @memberof ChainPropertiesDTO
     */
    enableVerifiableState?: boolean;
    /**
     * Set to true if block chain should calculate receipts so that state changes are fully verifiable at each block.
     * @type {boolean}
     * @memberof ChainPropertiesDTO
     */
    enableVerifiableReceipts?: boolean;
    /**
     * Mosaic id used as primary chain currency.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    currencyMosaicId?: string;
    /**
     * Mosaic id used to provide harvesting ability.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    harvestingMosaicId?: string;
    /**
     * Targeted time between blocks.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    blockGenerationTargetTime?: string;
    /**
     * A higher value makes the network more biased.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    blockTimeSmoothingFactor?: string;
    /**
     * Number of blocks between successive finalization attempts.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    blockFinalizationInterval?: string;
    /**
     * Number of blocks that should be treated as a group for importance purposes.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    importanceGrouping?: string;
    /**
     * Percentage of importance resulting from fee generation and beneficiary usage.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    importanceActivityPercentage?: string;
    /**
     * Maximum number of blocks that can be rolled back.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    maxRollbackBlocks?: string;
    /**
     * Maximum number of blocks to use in a difficulty calculation.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    maxDifficultyBlocks?: string;
    /**
     * Default multiplier to use for dynamic fees.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    defaultDynamicFeeMultiplier?: string;
    /**
     * Maximum lifetime a transaction can have before it expires.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    maxTransactionLifetime?: string;
    /**
     * Maximum future time of a block that can be accepted.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    maxBlockFutureTime?: string;
    /**
     * Initial currency atomic units available in the network.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    initialCurrencyAtomicUnits?: string;
    /**
     * Maximum atomic units (total-supply * 10 ^ divisibility) of a mosaic allowed in the network.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    maxMosaicAtomicUnits?: string;
    /**
     * Total whole importance units available in the network.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    totalChainImportance?: string;
    /**
     * Minimum number of harvesting mosaic atomic units needed for an account to be eligible for harvesting.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    minHarvesterBalance?: string;
    /**
     * Maximum number of harvesting mosaic atomic units needed for an account to be eligible for harvesting.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    maxHarvesterBalance?: string;
    /**
     * Minimum number of harvesting mosaic atomic units needed for an account to be eligible for voting.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    minVoterBalance?: string;
    /**
     * Maximum number of voting keys that can be registered at once per account.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    maxVotingKeysPerAccount?: string;
    /**
     * Minimum number of finalization rounds for which voting key can be registered.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    minVotingKeyLifetime?: string;
    /**
     * Maximum number of finalization rounds for which voting key can be registered.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    maxVotingKeyLifetime?: string;
    /**
     * Percentage of the harvested fee that is collected by the beneficiary account.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    harvestBeneficiaryPercentage?: string;
    /**
     * Percentage of the harvested fee that is collected by the network.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    harvestNetworkPercentage?: string;
    /**
     * Address encoded using a 32-character set.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    harvestNetworkFeeSinkAddress?: string;
    /**
     * Number of blocks between cache pruning.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    blockPruneInterval?: string;
    /**
     * Maximum number of transactions per block.
     * @type {string}
     * @memberof ChainPropertiesDTO
     */
    maxTransactionsPerBlock?: string;
}

export function ChainPropertiesDTOFromJSON(json: any): ChainPropertiesDTO {
    return ChainPropertiesDTOFromJSONTyped(json, false);
}

export function ChainPropertiesDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChainPropertiesDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'enableVerifiableState': !exists(json, 'enableVerifiableState') ? undefined : json['enableVerifiableState'],
        'enableVerifiableReceipts': !exists(json, 'enableVerifiableReceipts') ? undefined : json['enableVerifiableReceipts'],
        'currencyMosaicId': !exists(json, 'currencyMosaicId') ? undefined : json['currencyMosaicId'],
        'harvestingMosaicId': !exists(json, 'harvestingMosaicId') ? undefined : json['harvestingMosaicId'],
        'blockGenerationTargetTime': !exists(json, 'blockGenerationTargetTime') ? undefined : json['blockGenerationTargetTime'],
        'blockTimeSmoothingFactor': !exists(json, 'blockTimeSmoothingFactor') ? undefined : json['blockTimeSmoothingFactor'],
        'blockFinalizationInterval': !exists(json, 'blockFinalizationInterval') ? undefined : json['blockFinalizationInterval'],
        'importanceGrouping': !exists(json, 'importanceGrouping') ? undefined : json['importanceGrouping'],
        'importanceActivityPercentage': !exists(json, 'importanceActivityPercentage') ? undefined : json['importanceActivityPercentage'],
        'maxRollbackBlocks': !exists(json, 'maxRollbackBlocks') ? undefined : json['maxRollbackBlocks'],
        'maxDifficultyBlocks': !exists(json, 'maxDifficultyBlocks') ? undefined : json['maxDifficultyBlocks'],
        'defaultDynamicFeeMultiplier': !exists(json, 'defaultDynamicFeeMultiplier') ? undefined : json['defaultDynamicFeeMultiplier'],
        'maxTransactionLifetime': !exists(json, 'maxTransactionLifetime') ? undefined : json['maxTransactionLifetime'],
        'maxBlockFutureTime': !exists(json, 'maxBlockFutureTime') ? undefined : json['maxBlockFutureTime'],
        'initialCurrencyAtomicUnits': !exists(json, 'initialCurrencyAtomicUnits') ? undefined : json['initialCurrencyAtomicUnits'],
        'maxMosaicAtomicUnits': !exists(json, 'maxMosaicAtomicUnits') ? undefined : json['maxMosaicAtomicUnits'],
        'totalChainImportance': !exists(json, 'totalChainImportance') ? undefined : json['totalChainImportance'],
        'minHarvesterBalance': !exists(json, 'minHarvesterBalance') ? undefined : json['minHarvesterBalance'],
        'maxHarvesterBalance': !exists(json, 'maxHarvesterBalance') ? undefined : json['maxHarvesterBalance'],
        'minVoterBalance': !exists(json, 'minVoterBalance') ? undefined : json['minVoterBalance'],
        'maxVotingKeysPerAccount': !exists(json, 'maxVotingKeysPerAccount') ? undefined : json['maxVotingKeysPerAccount'],
        'minVotingKeyLifetime': !exists(json, 'minVotingKeyLifetime') ? undefined : json['minVotingKeyLifetime'],
        'maxVotingKeyLifetime': !exists(json, 'maxVotingKeyLifetime') ? undefined : json['maxVotingKeyLifetime'],
        'harvestBeneficiaryPercentage': !exists(json, 'harvestBeneficiaryPercentage') ? undefined : json['harvestBeneficiaryPercentage'],
        'harvestNetworkPercentage': !exists(json, 'harvestNetworkPercentage') ? undefined : json['harvestNetworkPercentage'],
        'harvestNetworkFeeSinkAddress': !exists(json, 'harvestNetworkFeeSinkAddress') ? undefined : json['harvestNetworkFeeSinkAddress'],
        'blockPruneInterval': !exists(json, 'blockPruneInterval') ? undefined : json['blockPruneInterval'],
        'maxTransactionsPerBlock': !exists(json, 'maxTransactionsPerBlock') ? undefined : json['maxTransactionsPerBlock'],
    };
}

export function ChainPropertiesDTOToJSON(value?: ChainPropertiesDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'enableVerifiableState': value.enableVerifiableState,
        'enableVerifiableReceipts': value.enableVerifiableReceipts,
        'currencyMosaicId': value.currencyMosaicId,
        'harvestingMosaicId': value.harvestingMosaicId,
        'blockGenerationTargetTime': value.blockGenerationTargetTime,
        'blockTimeSmoothingFactor': value.blockTimeSmoothingFactor,
        'blockFinalizationInterval': value.blockFinalizationInterval,
        'importanceGrouping': value.importanceGrouping,
        'importanceActivityPercentage': value.importanceActivityPercentage,
        'maxRollbackBlocks': value.maxRollbackBlocks,
        'maxDifficultyBlocks': value.maxDifficultyBlocks,
        'defaultDynamicFeeMultiplier': value.defaultDynamicFeeMultiplier,
        'maxTransactionLifetime': value.maxTransactionLifetime,
        'maxBlockFutureTime': value.maxBlockFutureTime,
        'initialCurrencyAtomicUnits': value.initialCurrencyAtomicUnits,
        'maxMosaicAtomicUnits': value.maxMosaicAtomicUnits,
        'totalChainImportance': value.totalChainImportance,
        'minHarvesterBalance': value.minHarvesterBalance,
        'maxHarvesterBalance': value.maxHarvesterBalance,
        'minVoterBalance': value.minVoterBalance,
        'maxVotingKeysPerAccount': value.maxVotingKeysPerAccount,
        'minVotingKeyLifetime': value.minVotingKeyLifetime,
        'maxVotingKeyLifetime': value.maxVotingKeyLifetime,
        'harvestBeneficiaryPercentage': value.harvestBeneficiaryPercentage,
        'harvestNetworkPercentage': value.harvestNetworkPercentage,
        'harvestNetworkFeeSinkAddress': value.harvestNetworkFeeSinkAddress,
        'blockPruneInterval': value.blockPruneInterval,
        'maxTransactionsPerBlock': value.maxTransactionsPerBlock,
    };
}

